# Default values for helm-guestbook.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
image:
  repository: sompornic/my-app
  tag: staging1.0.124
  pullPolicy: IfNotPresent
service:
  type: ClusterIP
  port: 3000
ingress:
  enabled: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#  cpu: 100m
#  memory: 128Mi
# requests:
#  cpu: 100m
#  memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}
# charts/my-app/values.yaml
config_payload: {"appName": "ac-paragon", "projectName": "PARAGON", "coreVersion": "2.7.0", "namespace": "ac-paragon", "cert": {"certPath": "./ssl/smaf-partner-cert.pem", "keyPath": "./ssl/smaf-partner-key.pem"}, "port": {"httpPort": "8801"}, "mongo": {"useDB": "", "options": {"readPreference": "secondaryPreferred", "connectTimeoutMS": 10000, "maxPoolSize": 20, "minPoolSize": 1, "maxIdleTimeMS": 10000, "replicaSet": "replSet01"}}, "cache": {"useCache": false}, "plugin": {"cache": {}, "log": {"cedaLog": {"formatLog": {"detail": {"action": "#PARAM.action", "actionDescription": "#PARAM.actionDescription", "appName": "#CONF.projectName", "broker": "#HEAD.mfaf-broker", "channel": "#HEAD.mfaf-channel", "componentName": "#CONF.appName", "componentVersion": "#CONF.coreVersion", "device": "#HEAD.mfaf-device", "dependency": "#PARAM.dependency", "instance": "#PARAM.instance", "level": "info", "message": "#PARAM.message", "originateServiceName": "Event source", "public": "#HEAD.mfaf-public", "recordName": ["[", "#REQ.method", "]-", "#REQ.url"], "recordType": "#PARAM.recordType", "sessionId": "#HEAD.mfaf-session", "subAction": "#PARAM.subAction", "timestamp": "#PARAM.timestamp", "transactionId": "#HEAD.mfaf-transaction||#HEAD.nsb-transaction", "useCase": "#HEAD.mfaf-usecase", "useCaseStep": "#HEAD.mfaf-usecasestep", "user": "#HEAD.mfaf-user", "responseTime": ""}, "summary": {"appName": "#CONF.projectName", "appResult": "#PARAM.appResult", "appResultCode": "#PARAM.appResultCode", "appResultType": "#PARAM.appResultType", "broker": "#HEAD.mfaf-broker", "channel": "#HEAD.mfaf-channel", "componentName": "#CONF.appName", "componentVersion": "#CONF.coreVersion", "dateTime": "#PARAM.dateTime", "device": "#HEAD.mfaf-device", "instance": "#PARAM.instance", "level": "info", "originateServiceName": "Event source", "public": "#HEAD.mfaf-public", "recordName": ["[", "#REQ.method", "]-", "#REQ.url"], "recordType": "#PARAM.recordType", "sessionId": "#HEAD.mfaf-session", "severity": "#PARAM.severity", "stack": "#PARAM.stack", "transactionId": "#HEAD.mfaf-transaction", "useCase": "#HEAD.mfaf-usecase", "useCaseStep": "#HEAD.mfaf-usecasestep", "user": "#HEAD.mfaf-user"}, "error": {"action": "#PARAM.action", "actionDescription": "#PARAM.actionDescription", "appName": "#CONF.projectName", "broker": "#HEAD.mfaf-broker", "channel": "#HEAD.mfaf-channel", "componentName": "#CONF.appName", "componentVersion": "#CONF.coreVersion", "device": "#HEAD.mfaf-device", "dependency": "#PARAM.dependency", "instance": "#PARAM.instance", "level": "error", "message": "#PARAM.message", "originateServiceName": "Event source", "public": "#HEAD.mfaf-public", "recordName": ["[", "#REQ.method", "]-", "#REQ.url"], "recordType": "#PARAM.recordType", "sessionId": "#HEAD.mfaf-session", "subAction": "#PARAM.subAction", "timestamp": "#PARAM.timestamp", "transactionId": "#HEAD.mfaf-transaction", "useCase": "#HEAD.mfaf-usecase", "useCaseStep": "#HEAD.mfaf-usecasestep", "user": "#HEAD.mfaf-user", "stack": "#PARAM.stack"}}}}, "database": {}, "cloudMonitor": {}, "statController": {"prometheus": {"flush": true, "formatLog": {"matricLabel": {"commandName": "", "destinationNode": "", "code": "", "method": "", "type": "", "result": "", "applicationName": "#CONF.appName", "containerId": "", "instance": "", "namespace": "#CONF.namespace", "group": "App", "tier": "Backend"}}}}}, "apps": {"cronSchedule": {}, "defaultTCPmethod": "POST", "limit": "1mb", "strictSSL": false, "log": {"levelLog": "verbose", "sessionRequest": ["#HEAD.mfaf-session"], "defaultSession": ["none"], "stat": {"statconsole": true, "statInterval": 1, "statformat": {"LogType": "Stat", "Host": "#PARAM.Host", "AppName": "#CONF.appName", "Instance": 0, "TimeStamp": "#PARAM.TimeStamp", "StatName": "#PARAM.StatName", "StatCount": "#PARAM.StatCount"}, "statPattern": {"suc": "<nodeName> <type> <destNode> <command> <action>", "err": "<nodeName> <type> <destNode> <command> <action>", "success": "<nodeName> <type> <destNode> <command> <action>", "errFlow": "<nodeName> <type> <destNode> <command> <action>", "missingOrInvalid": "<nodeName> <type> <destNode> bad <command> <action>", "receivedRequest": "<nodeName> received <command> request", "returnedSuccess": "<nodeName> returned <command> success", "receivedUnknownUrl": "<nodeName> received <command> request", "returnedUnknownUrl": "<nodeName> returned <command> error", "returnedError": "<nodeName> returned <command> error", "returnedSystemError": "<nodeName> returned <command> system error", "missingOrInvalidRequest": "<nodeName> received bad <command> request", "type": {"recv": "recv", "send": "sent", "request": "request", "received": "received", "returned": "returned"}, "action": {"req": "request", "res": "response", "response": "response", "timeout": "timeout", "connectionError": "connection error", "responseError": "error response"}, "delimiter": "__"}}, "file": {"path": "logs"}, "formatLog": {"app": {"action": "#PARAM.action", "actionDescription": "#PARAM.actionDescription", "message": "#PARAM.message", "timestamp": "#PARAM.timestamp", "transactionId": "#HEAD.mfaf-transaction||#HEAD.nsb-transaction"}}}, "randomHost": "2", "getListOfValueSchedule": "21:55", "getListOfValueInterval": "1", "restartCommand": "pm2 start pm2.json --env <mode>", "statusCodeList": [100, 101, 103, 200, 201, 202, 203, 204, 205, 206, 300, 301, 302, 303, 304, 307, 308, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 425, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511], "tableList": ["protocol", "validateCommand", "msg", "responseFormat", "mappingResponse", "pattern", "responseStatus", "mainCommand", "command", "condition", "encodeMsg", "statAlarm"], "defaultLog": {"session": {"ssid": ["@CONFIG.appName", "-", "@FUNC.currentDatetime('YYYYMMDDHHmmss')", "@FUNC.random('[A-Za-z0-9]{5}')"], "rtid": ["@CONFIG.appName", "-", "@FUNC.currentDatetime('YYYYMMDDHHmmss')", "@FUNC.random('[A-Za-z0-9]{5}')"], "tid": ["@CONFIG.appName", "-", "@FUNC.currentDatetime('YYYYMMDDHHmmss')", "@FUNC.random('[A-Za-z0-9]{5}')"], "getTransaction": ["@FUNC.currentDatetime('YYYYMMDDHHmmsss')", "@FUNC.random('[0-9]{5}')"]}, "delimiter": ":", "initInvoke": ["@CONFIG.apps.defaultLog.session.tid"], "identity": ["@CONFIG.apps.defaultLog.session.tid"], "invoke": ["@CONFIG.apps.defaultLog.session.tid"]}, "encryptAes256Key": "bPeShVmYq3t6v9y$B&E)H@McQfTjWnZr", "accessControlAllowOrigin": "*", "accessControlAllowMethods": "POST, PUT, GET, DELETE, OPTIONS, PATCH", "accessControlAllowHeaders": "Origin, X-Requested-With, Content-Type, Accept, Authorization, Role, Username, X-Sgl-Id, X-Tid, X-Transaction-Id"}, "custom": {"legacy": {"paragon": {"endpoint": ["stg-external-apiproxy.intra.ais"], "authLoginParagon": {"header": {}, "protocol": "HTTPS", "contentType": "application/json", "method": "POST", "timeout": 10, "uri": "/api/v2/auth/login"}, "onboardsims": {"header": {}, "protocol": "HTTPS", "contentType": "application/json", "method": "POST", "timeout": 10, "uri": "/api/v1/sim-allocation/onboard"}, "deleteDevice": {"header": {}, "protocol": "HTTPS", "contentType": "application/json", "method": "POST", "timeout": 10, "uri": "/api/v1/sim-allocation/sim-deactivation"}}}, "commonMongoDB": {"protocolDB": "mongodb", "dbType": "mongo", "dbName": "ac-paragon-stg", "useDB": "", "usernameDB": "acParagon", "passwordDB": "acParagonPassword", "options": {"readPreference": "secondaryPreferred", "connectTimeoutMS": 10000, "maxPoolSize": 20, "minPoolSize": 1, "maxIdleTimeMS": 10000}, "startOnServer": true}}}
config:
  configMap:
    config:
      config-iot.json:
        appName: ac-paragon
